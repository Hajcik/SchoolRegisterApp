@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@inject SignInManager<User> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="nav nav-pills nav-stacked">
    <li class="@ManageNavPages.IndexNavClass(ViewContext)"><a asp-page="./Index">Profile</a></li>
    <li class="@ManageNavPages.ChangePasswordNavClass(ViewContext)"><a id="change-password" asp-page="./ChangePassword">@Localizer["Password"]</a></li>
    @if (hasExternalLogins)
    {
        <li class="@ManageNavPages.ExternalLoginsNavClass(ViewContext)"><a id="external-login" asp-page="./ExternalLogins">@Localizer["ExternalLogin"]</a></li>
    }

    <li class="@ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)"><a asp-page="./TwoFactorAuthentication">@Localizer["TwoFactor"]</a></li>
    <li class="@ManageNavPages.PersonalDataNavClass(ViewContext)"><a asp-page="./PersonalData">@Localizer["PersonalData"]</a></li>
    @if (User.IsInRole("Admin"))
    {
        <li class="@ManageNavPages.RegisterNewUsersNavClass(ViewContext)"><a asp-page="./RegisterNewUsers">@Localizer["RegisterNewUsers"]</a></li>
    }
</ul>
